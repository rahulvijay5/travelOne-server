generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  OWNER
  MANAGER
  CUSTOMER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}

enum RoomStatus {
  AVAILABLE
  BOOKED
  MAINTENANCE
  LOCKED
}

model User {
  id          String   @id @default(uuid())
  clerkId     String   @unique
  name        String
  email       String   @unique
  phoneNumber String   @unique
  role        Role     @default(CUSTOMER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownedHotels   Hotel[]        @relation("HotelOwner")
  managedHotels Hotel[]        @relation("HotelManager")
  bookings      Booking[]
  pushTokens    PushToken[]
  notifications Notification[]
}

model PushToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Notification {
  id         String   @id @default(uuid())
  title      String
  body       String
  type       String // created, updated, cancelled, completed
  bookingId  String?
  hotelId    String
  booking    Booking? @relation(fields: [bookingId], references: [id])
  hotel      Hotel    @relation(fields: [hotelId], references: [id])
  recipients User[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Hotel {
  id            String @id @default(uuid())
  hotelName     String
  description   String
  location      String // Google Maps URL
  address       String
  totalRooms    Int
  code          String @unique
  contactNumber String

  // Hotel Rules
  rules HotelRules?

  // Arrays
  amenities   String[]
  hotelImages String[]

  // Relations
  owner            User[]             @relation("HotelOwner")
  managers         User[]             @relation("HotelManager")
  rooms            Room[]
  bookings         Booking[]
  notifications    Notification[]
  bookingAnalytics BookingAnalytics[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model HotelRules {
  id      String @id @default(uuid())
  hotel   Hotel  @relation(fields: [hotelId], references: [id])
  hotelId String @unique

  petsAllowed                 Boolean @default(false)
  maxPeopleInOneRoom          Int
  extraMattressOnAvailability Boolean @default(false)
  parking                     Boolean @default(false)
  swimmingPool                Boolean @default(false)
  swimmingPoolTimings         String?
  ownRestaurant               Boolean @default(false)
  checkInTime                 Int
  checkOutTime                Int
  guestInfoNeeded             Boolean @default(false)
  smokingAllowed              Boolean @default(false)
  alcoholAllowed              Boolean @default(false)
  eventsAllowed               Boolean @default(false)
  minimumAgeForCheckIn        Int     @default(18)
}

model Room {
  id           String     @id @default(uuid())
  hotel        Hotel      @relation(fields: [hotelId], references: [id])
  roomNumber   String     @default("101")
  hotelId      String
  type         String
  price        Float
  maxOccupancy Int
  features     String[]
  images       String[]
  roomStatus   RoomStatus @default(AVAILABLE)

  // Relations
  bookings Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id         String        @id @default(uuid())
  hotel      Hotel         @relation(fields: [hotelId], references: [id])
  hotelId    String
  room       Room          @relation(fields: [roomId], references: [id])
  roomId     String
  customer   User          @relation(fields: [customerId], references: [id])
  customerId String
  checkIn    DateTime
  checkOut   DateTime
  guests     Int
  status     BookingStatus @default(PENDING)

  // Relations
  payment       Payment?
  notifications Notification[]

  bookingTime DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id            String        @id @default(uuid())
  booking       Booking       @relation(fields: [bookingId], references: [id])
  bookingId     String        @unique
  totalAmount   Float
  paidAmount    Float
  status        PaymentStatus @default(PENDING)
  transactionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookingAnalytics {
  id                String   @id @default(uuid())
  hotelId           String
  hotel             Hotel    @relation(fields: [hotelId], references: [id])
  date              DateTime
  timeframe         String
  totalBookings     Int
  confirmedBookings Int
  totalRevenue      Float
  averageRevenue    Float
  occupancyRate     Float
  createdAt         DateTime @default(now())

  @@unique([hotelId, date, timeframe], name: "hotelId_date_timeframe")
}
